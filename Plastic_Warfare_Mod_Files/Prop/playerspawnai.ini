[core]
name: playerspawn_ai
displayText: MT Deployer AI
displayDescription: - Links up with other deployers and facilitates modular tank deployment on field operations.
tags: playerspawn
class: CustomUnitMetadata
price: 3000
maxHp: 3000
mass: 3000
techLevel: 1
buildSpeed: 45s
#availableInDemo: true
#isUnselectable: true
disableAllUnitCollisions: true

isPickableStartingUnit: true
radius: 65
displayRadius: 65
isBio: false
isBuilder: true
softCollisionOnAll: 0
isBuilding: true
#footprint used for collisions with units (left, up, right, down)
footprint: -2,-1,2,1
fogOfWarSightRange: -10
overrideAndReplace: commandCenter, modularSpider
#used for placement, and placement of other buildings
@memory plyrIntro:string
@memory deployPoint:unit
@memory server:unit

[hiddenAction_notFriendly]
autoTrigger: if not self.isControlledByAI() and self.teamId() >= 0
convertTo: playerspawn

[hiddenAction_fromServer]
autoTrigger: if self.isOnNeutralTeam()
switchToAggressiveTeam: true
#switchToTeam: -1*self.x


[ai]
useAsBuilder: true

[core]
canBuild_1_name: modularRover
canBuild_1_isVisible: false

[graphics]
total_frames: 1
image:  playerSpawn.png
image_wreak:  NONE
image_turret: NONE
image_shadow: AUTO
drawLayer: top

[arm_1]
image_end: playerspawn_rot1.png
image_end_teamColors:true 
spinRate: 0.75
x: 0
y: 0
drawOverBody: true
hidden: if not self.hasFlag(id=30)

[arm_2]
image_end: playerspawn_rot2.png
image_end_teamColors:true 
spinRate: 0.75
x: 0
y: 0
drawOverBody: true
hidden: if not self.hasFlag(id=31)

[hiddenAction_setServer]
autoTriggerOnEvent: created
setUnitMemory: server = globalSearchForFirstUnit(withTag="server")

[hiddenAction_preserverattendance]
autoTrigger: if int(self.timeAlive()) == self.teamId()
debugMessage: Player %{self.teamId()} present
setUnitMemory: """
plyrIntro = 'P' + (self.teamId()+1) + ' Pr | '
"""
alsoTriggerAction: serverattendance

[hiddenAction_serverattendance]
sendMessageTo: memory.server
sendMessageWithTags: attendance
sendMessageWithData: plyr = memory.plyrIntro

[action_toggleCharacter1]
text: Modular Rover "Kalasag"
descriptionAddFromUnit: modularRover
addResources: setFlag=30, unsetFlag=31
isActive: if not self.hasFlag(id=30)
price: 0
buildSpeed: 0.5s
unitShownInUI: modularRover
pos: 1
autoTriggerOnEvent: created
ai_isHighPriority: true
isLocked: if self.hasFlag(id=2)
isLockedMessage: Ready state already set, changing vehicle is not allowed!

[action_toggleCharacter2]
text: Modular Walker "Kampilan"
descriptionAddFromUnit: modularWalker
addResources: setFlag=31, unsetFlag=30
isActive: if not self.hasFlag(id=31)
price: 0
buildSpeed: 0.5s
unitShownInUI: modularWalker
pos: 2
ai_isHighPriority: true
isLocked: if self.hasFlag(id=2)
isLockedMessage: Ready state already set, changing vehicle is not allowed!


[action_playerReady]
sendMessageTo: memory.server
sendMessageWithTags: ready
sendMessageWithData: plyr = str("P" + int(self.teamId+1) + ' Re | ' )
text: Ready
description: Are you sure?
buildSpeed: 5s
price: 0
isLocked: if self.hasFlag(id=2)
isLockedMessage: Ready state already set, cancelling is not allowed!
addResources: setFlag=2
isLockedAlt: if not self.hasFlag(id=1)
isLockedAltMessage: Coordinates unset. Please select deployment site.
autoTrigger: if (self.isControlledByAI() and self.hasFlag(id=1) and not self.hasFlag(id=2) and int(self.timeAlive()) >= 11) or memory.server.readUnitMemory(name="gameTime", type="number") == 60
pos: 4

[hiddenAction_deploySpot]
autoTrigger: if int(self.timeAlive) == int(rnd(1 + self.teamId(), 12+self.teamId())) and not self.hasFlag(id=1)
# and self.isControlledByAI()
setUnitMemory: deployPoint = createMarker(x = int(rnd(100, game.mapWidth()-100)), y=int(rnd(100, game.mapHeight()-100)))
addResources: setFlag=1
debugMessage: Player %{self.teamId} Deployment @ %{memory.deployPoint.x}, %{memory.deployPoint.y}
pos: 3

[hiddenAction_spotGud?]
autoTrigger: if (memory.deployPoint.isInMap() == false or memory.deployPoint.isOverOpenLand == false) and self.hasFlag(id=1)
setUnitMemory: deployPoint = createMarker(x = int(rnd(100, game.mapWidth()-100)), y=int(rnd(100, game.mapHeight()-100)))
debugMessage: Player %{self.teamId} Redeployment @ %{memory.deployPoint.x}, %{memory.deployPoint.y}
showMessageToPlayer: Coordinate automatically and randomly reassigned due to unsuitable spawn location.

[action_setManualSpot]
fireTurretXAtGround: playerSpawner
fireTurretXAtGround_withProjectile: selector
text: Select Spot
description: Select your desired area for deployment
buildSpeed: 0
price: 0
setUnitMemory: deployPoint = self.thisActionTarget
isVisible: if not self.isControlledByAI()
addResources: setFlag=1 

[action_playerLog]
addResources: ammo=1
text: Player Log
description: Deployment @ (%{memory.deployPoint.x}, %{memory.deployPoint.y})
pos: -999
isActive: false

[hiddenAction_allReady1]
autoTrigger: if memory.server.readUnitMemory(name="player", type="number") <= memory.server.readUnitMemory(name="playerReady", type="number") and not self.hasFlag(id=3) and self.hasFlag(id=2) and self.hasFlag(id=30)
addResources: setFlag=3
alsoQueueAction: deployRover
showMessageToPlayer: All Players ready! Deployment pending...

[hiddenAction_allReady2]
autoTrigger: if memory.server.readUnitMemory(name="player", type="number") <= memory.server.readUnitMemory(name="playerReady", type="number") and not self.hasFlag(id=3) and self.hasFlag(id=2) and self.hasFlag(id=31)
addResources: setFlag=3
alsoQueueAction: deployRoverB
showMessageToPlayer: All Players ready! Deployment pending...

[hiddenAction_deployRover]
fireTurretXAtGround: playerspawner
fireTurretXAtGround_withProjectile: player
fireTurretXAtGround_withTarget: unitref memory.deployPoint
deleteSelf: true
showMessageToPlayer: Good Luck!

[hiddenAction_deployRoverB]
fireTurretXAtGround: playerspawner
fireTurretXAtGround_withProjectile: playerB
fireTurretXAtGround_withTarget: unitref memory.deployPoint
deleteSelf: true
showMessageToPlayer: Good Luck!


[turret_playerspawner]
#nuke turret
canShoot: false
x: 0
y: 0
idleDir:0
invisible: true
projectile: player
size: 1

[projectile_selector]
#spawnUnit: modularTank
directDamage: 0
life: 100
speed: 0.1
instant: true
deflectionPower:-1

[projectile_player]
spawnUnit: modularRover(alwayStartDirAtZero=true)
directDamage: 0
life: 100
speed: 0.1
instant: true
deflectionPower:-1

[projectile_playerB]
spawnUnit: modularWalker(alwayStartDirAtZero=true)
directDamage: 0
life: 100
speed: 0.1
instant: true
deflectionPower:-1

[attack]
canAttack: false
canAttackFlyingUnits: false
canAttackLandUnits:   true
canAttackUnderwaterUnits: false
turretSize: 20
turretTurnSpeed: 3
maxAttackRange: 999999
shootDelay: 0

[movement]
movementType: LAND
moveSpeed: 0
moveAccelerationSpeed: 0
moveDecelerationSpeed: 0

reverseSpeedPercentage:0
maxTurnSpeed:0
turnAcceleration: 0






